{"version":3,"sources":["components/ErrorMessage/ErrorMessage.js","components/User/User.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","User","src","user","avatar_url","alt","login","href","followers","following","public_repos","html_url","name","bio","location","twitter_username","created_at","App","onInputChange","e","setState","state","inputText","target","value","fetchData","key","axios","get","then","res","userData","data","catch","err","onButtonClick","ready","prevProps","prevState","this","type","onChange","onClick","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.1e375b4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n\r\nfunction ErrorMessage(props) {\r\n  // console.log(props.ready);\r\n  return (\r\n    <div className = \"ErrorMessage\">\r\n     <h1>Enter correct username</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import React from \"react\";\r\nimport \"./User.css\";\r\n\r\nfunction User(props) {\r\n  \r\n  return (\r\n    <div className = \"User\">\r\n      <div className = \"top\" >\r\n        <img src = {props.user.avatar_url} alt = {props.user.login}/>\r\n        <div>\r\n          <p>Followers<br/><a \r\n          href= {`https://github.com/${props.user.login}?tab=followers`}>{props.user.followers}</a></p>\r\n          <p>Following<br/><a href= {`https://github.com/${props.user.login}?tab=following`}  >{props.user.following}</a></p>\r\n          <p>Public Repos<br/><a href = {`https://github.com/${props.user.login}?tab=repositories`}>{props.user.public_repos}</a></p>\r\n        </div>\r\n      </div>\r\n      <div className = \"middle\">\r\n        <p>Name : <a href= {props.user.html_url} >{props.user.name}</a></p>\r\n        <p>Bio : {props.user.bio}</p>\r\n        <p>Location : {props.user.location}</p>\r\n        <p>Twitter : <a href={`https://twitter.com/${props.user.twitter_username}`}>{props.user.twitter_username}</a></p>\r\n        <p>Created at : {props.user.created_at}</p>\r\n      </div>\r\n      <div className = \"bottom\">\r\n        <img src={`https://grass-graph.moshimo.works/images/${props.user.login}.png?`} alt=\"Contribution graph \"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default User;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport ErrorMessage from \"./components/ErrorMessage/ErrorMessage\";\nimport User from \"./components/User/User\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      user : \"NULL\",\n      inputText : \"\",\n      ready: false\n    }\n  }\n\n  onInputChange = e => {\n    this.setState(\n      {\n        ...this.state,\n        inputText : e.target.value\n      }\n    );\n  }\n\n  fetchData = (key) => {\n    axios\n      .get(`https://api.github.com/users/${key}`)\n      .then(res => {\n        const userData = res.data;\n        this.setState({\n          ...this.state,\n          user: userData\n        });\n      })\n      .catch(err => {\n        this.setState({\n          ...this.state,\n          user: \"NULL\",\n        })\n        // console.log(\"err : \" + err)\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.ready !== prevState.ready) {\n      this.fetchData(this.state.inputText);\n      this.setState({\n        ...this.state,\n        ready : false\n      })\n    }\n  }\n\n  onButtonClick = () => {\n    this.setState({\n      ...this.state,\n      ready : true\n    })\n  }\n\n  render() {\n    // console.log(this.state.user);\n    return (\n      <div className = \"App\">\n        <h1 className = \"header\">GITHUB USER DATA</h1>\n        <input \n          type = \"text\" \n          value = {this.state.inputText}\n          onChange = {this.onInputChange} />\n        <button onClick = {this.onButtonClick}>SUBMIT</button>\n        \n        {(this.state.user === \"NULL\") ? <ErrorMessage ready = {this.state.ready} user = {this.state.user}/> : <User  user = {this.state.user} />}        \n      </div>\n    );\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://api.github.com/users/${this.state.inputText}`)\n      .then(res => {\n        const userData = res.data;\n        this.setState({\n          ...this.state,\n          user: userData\n        });\n      })\n      .catch(err => {\n        this.setState({\n          ...this.state,\n          user: \"NULL\",\n        })\n        // console.log(\"err : \" + err)\n      });\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}